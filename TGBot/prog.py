import os.path
from pathlib import Path

from telebot.async_telebot import AsyncTeleBot
import asyncio
from config import *
import random
from telebot.types import *


# TODO: —Å–¥–µ–ª–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –Ω–∞ –±–æ—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É


def check_answers(answer, rule_answer):
    if answer == rule_answer:
        for quest in WORDS:
            yield QUESTION.format(quest)
    else:
        return WORDS[random.randint(0, len(WORDS) - 1)]


def get_inline_keyboard():
    inline_markup = InlineKeyboardMarkup()
    for key in INLINE_LIST:
        inline_markup.add(InlineKeyboardButton(key, callback_data=INLINE_LIST[key]))
    return inline_markup

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞
bot = AsyncTeleBot(TOKEN)

answer = 0


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
async def start(message):
    chat_id = message.chat.id
    last_name = message.from_user.last_name
    first_name = message.from_user.first_name
    print(chat_id)
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for text in REPLY_LIST:
        markup.add(KeyboardButton(text))

    #await bot.send_message(chat_id, "–ë–æ–¥—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *{0}* _{1}_!\n–Ø - *{2}*, –±–æ—Ç."
    #                       .format(last_name, first_name, bot.get_me().first_name), parse_mode='markdown')
    await bot.reply_to(message, "–•–æ—á–µ—à—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏?", reply_markup=markup)


#    bot.send_message(chat_id, QUESTION.format(WORDS[0]))


@bot.message_handler(commands=['sticker'])
async def sticker(message):
    pathDirs = Path("stickers")  # —Å–≤–æ–π –ø—É—Ç—å –∫ —Å—Ç–∏–∫–µ—Ä–∞–º
    listStickerPacks = os.listdir(pathDirs)  # –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ —Å—Ç–∏–∫–µ—Ä–æ–≤
    selectedSticker = listStickerPacks[random.randint(0, len(listStickerPacks) - 1)]
    absPathToStickers = Path(pathDirs + "\\" + selectedSticker).resolve()
    listStickers = os.listdir(absPathToStickers)
    size_list = len(listStickers)  # –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞
    selected_sticker = random.randint(0, size_list - 1)  # —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç–∏–∫–µ—Ä–∞
    pathSt = listStickers[selected_sticker]  # –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä
    # receiver_rnd = CHAT_IDS[random.randint(0, 3)]
    chatId = message.chat.id
    with open(pathSt, 'rb') as sticker:
        print(message.chat.id)
        await bot.send_sticker(chatId, sticker)
    # with open(pathSt, 'rb') as sticker:
    #     print(receiver_rnd)
    #     bot.send_sticker(receiver_rnd, sticker)


async def dice(message):
    chat_id = message.chat.id
    print(chat_id)
    await bot.delete_message(chat_id=chat_id, message_id=message.message_id)
    await bot.send_dice(chat_id, emoji="üé≤")


async def bowling(message):
    chat_id = message.chat.id
    print(chat_id)
    await bot.send_dice(chat_id, emoji="üé≥")


async def casino(message):
    chat_id = message.chat.id
    print(chat_id)
    await bot.send_dice(chat_id, emoji="üé∞")


# –ï—Å–ª–∏ —Å–æ–∑–¥–∞—ë–º —ç—Ö–æ,—Ç.–µ. —á—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤—å, –æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç, —Ç–æ–≥–¥–∞ –ø–∏—à–µ–º
@bot.message_handler(content_types=['text'])
async def echo(message):
    # bot.send_message(message.chat.id, message.text)
    chat_id = message.chat.id
    text = message.text
    

    if text in REPLY_LIST:
        if text == "üé≤dice":
            await dice(message)
        elif text == "üé≥bowling":
            await bowling(message)
        elif text == "üé∞casino":
            await casino(message)
    else:
        await bot.send_message(chat_id=chat_id, text=message.text, disable_notification=True, reply_markup=get_inline_keyboard())
    #receiver_rnd = CHAT_IDS[random.randint(0, len(CHAT_IDS))]
    # bot.forward_message(disable_notification=True, chat_id= )

    # inline_keyboard =

    # print(text)
    # if message.chat.type == 'private':
    #     if text == REPLY_LIST[0]:
    #         bot.send_message(chat_id, "LOOOOOOOL, –ó–ê–¢–†–ê–õ–õ–ï–ùü§£")
    #     elif text == REPLY_LIST[1]:
    #         bot.send_message(chat_id, "–ë–æ–ª—å–Ω–æ –∏ —Ö–æ—Ç–µ–ª–æ—Å—å...")
    #     elif text == REPLY_LIST[2]:
    #         bot.send_message(chat_id, "–ß–ò–í–û–û–û–û–û–û?")
    #     elif text == REPLY_LIST[3]:
    #         bot.send_message(chat_id, "–†–µ–∫–ª–∞–º–∞ –°–ë–ü?")
    #     else:
    #         bot.send_message(chat_id, "–î–£–ü–õ–û –°–ï–ë–ï –û–¢–ú–ï–ù–ò!")
    # bot.send_message(chat_id, QUESTION.format(WORDS[0]))
    # await bot.send_message(chat_id, "–ë–£–£–£–£–£–£–ú", reply_to_message_id=message.message_id)

@bot.callback_query_handler(func=lambda call: True)
async def callback_query(call):
    if call.data == "excellent":
        await bot.answer_callback_query(call.id, "–£–†–∞–∞–∞–∞–∞!")
    elif call.data == "fuck":
        await bot.answer_callback_query(call.id, "–ü–æ—Ö—É–π, –ø–ª—è—à–µ–º")

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
# bot.infinity_polling()  # –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è
asyncio.run(bot.polling())

# 1356924981 - –°–∞—à–∞
# 470054664 - –ò–≥–Ω–∞—Ç
# 1623096517 - –ò—Ä–∞
# 5834419012 - –¢–ê–Ω—å–∫–æ
