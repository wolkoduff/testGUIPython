import asyncio
import os.path
import random

import telebot
from telebot.async_telebot import AsyncTeleBot
from telebot.types import *

from config import *


# TODO: —Å–¥–µ–ª–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –Ω–∞ –±–æ—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É


def check_answers(answer, rule_answer):
    if answer == rule_answer:
        for quest in WORDS:
            yield QUESTION.format(quest)
    else:
        return WORDS[random.randint(0, len(WORDS) - 1)]


def get_inline_keyboard(flag):
    inline_markup = InlineKeyboardMarkup()
    if flag:
        for key in INLINE_LIST:
            inline_markup.add(InlineKeyboardButton(key, callback_data=INLINE_LIST[key]))
    else:
        for key in RULE_ANSWERS:
            inline_markup.add(InlineKeyboardButton(key, callback_data=RULE_ANSWERS[key]))
    return inline_markup


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞
bot = AsyncTeleBot(TOKEN)
logger = telebot.logger
telebot.logger.setLevel(logging.DEBUG)

answer = 0
text_question = ""

'''
–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∏–Ω–ª–∞–π–Ω –≤–æ–ø—Ä–æ—Å.
1. –í–æ–ø—Ä–æ—Å –≤ –∏–Ω–ª–∞–π–Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –¢–µ–∫—Å—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏
2. –ó–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
3. –ü–æ–ª—É—á–∏–≤ –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
4. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å!!!
'''

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
async def start(message):
    chat_id = message.chat.id
    last_name = message.from_user.last_name
    first_name = message.from_user.first_name
    print(chat_id)
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for text in REPLY_LIST:
        markup.add(KeyboardButton(text))

    # await bot.send_message(chat_id, "–ë–æ–¥—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *{0}* _{1}_!\n–Ø - *{2}*, –±–æ—Ç."
    #                       .format(last_name, first_name, bot.get_me().first_name), parse_mode='markdown')
    await bot.reply_to(message, "–•–æ—á–µ—à—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏?", reply_markup=markup)


#    bot.send_message(chat_id, QUESTION.format(WORDS[0]))


@bot.message_handler(commands=['sticker'])
async def sticker(message):
    path_dirs = Path("stickers")  # —Å–≤–æ–π –ø—É—Ç—å –∫ —Å—Ç–∏–∫–µ—Ä–∞–º
    sticker_pack_list = os.listdir(path_dirs)  # –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ —Å—Ç–∏–∫–µ—Ä–æ–≤
    selected_sticker = sticker_pack_list[random.randint(0, len(sticker_pack_list) - 1)]
    path_dir_str = path_dirs
    abs_path_to_stickers = Path(path_dirs + "\\" + selected_sticker).resolve()
    stickers_list = os.listdir(abs_path_to_stickers)
    size_list = len(stickers_list)  # –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞
    selected_sticker = random.randint(0, size_list - 1)  # —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç–∏–∫–µ—Ä–∞
    path_sticker = stickers_list[selected_sticker]  # –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä
    # receiver_rnd = CHAT_IDS[random.randint(0, 3)]
    chatId = message.chat.id
    with open(path_sticker, 'rb') as sticker:
        print(message.chat.id)
        await bot.send_sticker(chatId, sticker)
    # with open(path_sticker, 'rb') as sticker:
    #     print(receiver_rnd)
    #     bot.send_sticker(receiver_rnd, sticker)


async def dice(message):
    chat_id = message.chat.id
    print(chat_id)
    await bot.delete_message(chat_id=chat_id, message_id=message.message_id)
    await bot.send_dice(chat_id, emoji="üé≤")


async def bowling(message):
    chat_id = message.chat.id
    print(chat_id)
    await bot.send_dice(chat_id, emoji="üé≥")


async def casino(message: Message):
    chat_id = message.chat.id
    print(chat_id)
    await bot.send_dice(chat_id, emoji="üé∞")


# –ï—Å–ª–∏ —Å–æ–∑–¥–∞—ë–º —ç—Ö–æ,—Ç.–µ. —á—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤—å, –æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç, —Ç–æ–≥–¥–∞ –ø–∏—à–µ–º
@bot.message_handler(content_types=['text'])
async def echo(message):
    # bot.send_message(message.chat.id, message.text)
    chat_id = message.chat.id
    text = message.text

    try:
        res_string = text_question.split(" ")
        one = 0
        two = 0
        for x in res_string:
            if x.isnumeric():
                if one == 0:
                    one = int(x)
                else:
                    two = int(x)
        res = one + two
        if int(text) == res:
            await bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        else:
            await bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –±–ª..—Ç—å!")
    except Exception as e:
        await bot.send_message(chat_id, str(e))

    answer_list = ["–ù–∞ –ø–∏–∫–∏ —Å–∞–º —Å—è–¥—É, —Å—Ç—É–ª –¥—Ä—É–≥—É –ø–æ–¥—Å—Ç–∞–≤–ª—é (–ø–æ—Ç–æ–º—É —á—Ç–æ –±–µ–∑ –¥—Ä—É–∑–µ–π)", "–ü–∏—Ç–æ–Ω –ª–æ–º–∞–µ—Ç—Å—è, –¥–∂–∞–≤–∞ "
                                                                                     "–≤—ã–∫–∏–¥—ã–≤–∞–µ—Ç—Å—è"]

    if text in REPLY_LIST:
        if text == "üé≤dice":
            await dice(message)
        elif text == "üé≥bowling":
            await bowling(message)
        elif text == "üé∞casino":
            await casino(message)
    else:
        await bot.send_message(chat_id=chat_id, text=text, disable_notification=True,
                               reply_markup=get_inline_keyboard(True))
        await bot.send_poll(chat_id=chat_id, question="–ï—Å—Ç—å –¥–≤–∞ —Å—Ç—É–ª–∞. –ù–∞ –æ–¥–Ω–æ–º python-–≥–æ–≤—ë–Ω—ã–π, –Ω–∞ –¥—Ä—É–≥–æ–º "
                                                      "java-–ø—Ä–æ—Å–≤—è—â—ë–Ω–Ω—ã–π. –ù–∞ –∫–∞–∫–æ–π —Å—Ç—É–ª"
                                                      " —Å–∞–º —Å—è–¥–µ—à—å, –∞ –∫–∞–∫–æ–π –¥—Ä—É–≥—É –ø–æ–¥—Å—Ç–∞–≤–∏—à—å?",
                            options=answer_list, is_anonymous=True, allows_multiple_answers=True,
                            reply_markup=get_inline_keyboard(True))
    # receiver_rnd = CHAT_IDS[random.randint(0, len(CHAT_IDS))]
    # bot.forward_message(disable_notification=True, chat_id= )

    # inline_keyboard =

    # print(text)
    # if message.chat.type == 'private':
    #     if text == REPLY_LIST[0]:
    #         bot.send_message(chat_id, "LOOOOOOOL, –ó–ê–¢–†–ê–õ–õ–ï–ùü§£")
    #     elif text == REPLY_LIST[1]:
    #         bot.send_message(chat_id, "–ë–æ–ª—å–Ω–æ –∏ —Ö–æ—Ç–µ–ª–æ—Å—å...")
    #     elif text == REPLY_LIST[2]:
    #         bot.send_message(chat_id, "–ß–ò–í–û–û–û–û–û–û?")
    #     elif text == REPLY_LIST[3]:
    #         bot.send_message(chat_id, "–†–µ–∫–ª–∞–º–∞ –°–ë–ü?")
    #     else:
    #         bot.send_message(chat_id, "–î–£–ü–õ–û –°–ï–ë–ï –û–¢–ú–ï–ù–ò!")
    # bot.send_message(chat_id, QUESTION.format(WORDS[0]))
    # await bot.send_message(chat_id, "–ë–£–£–£–£–£–£–ú", reply_to_message_id=message.message_id)


@bot.callback_query_handler(func=lambda call: True)
async def callback_query(call):
    global text_question
    if call.data == "excellent":
        await bot.answer_callback_query(call.id, "–£–†–∞–∞–∞–∞–∞!")
    elif call.data == "fuck":
        one = random.randint(1, 9)
        two = random.randint(1, 9)
        text_question = "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {0} + {1}".format(one, two)
        await bot.answer_callback_query(call.id, text_question, show_alert=True)
        await bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=get_inline_keyboard(False))

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
# bot.infinity_polling()  # –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è
asyncio.run(bot.polling())

# TODO: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—É–ø–µ—Ä-–≥—Ä—É–ø–ø–µ

# 1356924981 - –°–∞—à–∞
# 470054664 - –ò–≥–Ω–∞—Ç
# 1623096517 - –ò—Ä–∞
# 5834419012 - –¢–ê–Ω—å–∫–æ
